{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/Header.js","components/Balanace.js","components/IncomeExpense.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","transactions","filter","transaction","id","payload","InitialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Header","Balanace","amounts","useContext","map","amount","console","log","total","reduce","acc","item","toFixed","IncomeExpense","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","vlaue","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4db68e52.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state, transactions: state.transactions.filter(transaction => transaction.id !== \r\n                    action.payload)\r\n            }\r\n            case 'ADD_TRANSACTION' :\r\n                return {\r\n                    ...state,\r\n                    transactions: [action.payload,...state.transactions]\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer'\r\n\r\n// Initial state\r\nconst InitialState = {\r\n    transactions: [] \r\n}\r\n\r\n//create context\r\nexport const GlobalContext = createContext(InitialState);\r\n\r\n//provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer , InitialState);\r\n \r\n//    Actions deleteion,add,\r\n      function deleteTransaction(id) {\r\n          dispatch({\r\n              type: 'DELETE_TRANSACTION',\r\n              payload: id\r\n          })\r\n      }\r\n      function addTransaction(transaction) {\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n        })\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions:state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>)\r\n}\r\n","import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                Expense Tracker App\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nexport const Balanace = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    console.log(amounts);\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n    return (\r\n        <div>\r\n            <h2>Your Balance</h2>\r\n             <h1 id=\"balance\">${total}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nexport const IncomeExpense = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item),0)\r\n    .toFixed(2);\r\n\r\n    const expense = (\r\n        amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) * -1\r\n    ).toFixed(2);\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n\r\n    <p  className=\"money plus\">{income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n    <p  className=\"money minus\">{expense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n  const sign = transaction.amount <0 ? '-' : '+';\r\n\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n    return (\r\n        <div>\r\n            <li className={transaction.amount < 0? 'minus' : 'plus'}>\r\n    {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span>\r\n                    <button onClick={() => deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n                </li>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { Transaction } from './Transaction'\r\n\r\n\r\nexport const TransactionList = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  console.log(transactions)\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map(transaction =>( <Transaction key={transaction.id} transaction={transaction}/> ))}\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 10000000000),\r\n            text,\r\n            amount: +amount\r\n        }\r\n        addTransaction(newTransaction);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add New Transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" vlaue=\"text\" onChange={(e) => setText(e.target.value)}  placeholder=\"Enter Text ....\"/>\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\">Amount<br/>\r\n                    (negative - expense, positive - income )</label>\r\n                    <input type=\"number\" vlaue=\"amount\" onChange={(e) => setAmount(e.target.value)}  placeholder=\"Enter amount ....\"/>\r\n                </div>\r\n                <button className=\"btn\">Add Transaction</button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css'\nimport { GlobalProvider } from './context/GlobalState'\n\nimport {Header} from './components/Header'\nimport { Balanace } from './components/Balanace.js'\nimport {IncomeExpense} from './components/IncomeExpense'\nimport {TransactionList} from './components/TransactionList'\nimport {AddTransaction} from './components/AddTransaction'\n\n//  ==================  PIAIC coding Start ==============\n// import Child from './components/child'\n// import Header from './components/header.js'\n//  ==================  PIAIC coding End ==============\nfunction App() {\n  return (\n    // <TransactionProvider>\n    //  <div><Child/></div>\n    //  </TransactionProvider>\n    <GlobalProvider>\n      <Header/>\n      <div className=\"container\">\n        <Balanace/>\n        <IncomeExpense/>\n        <TransactionList/>\n        <AddTransaction/>\n      </div>\n\n      </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}